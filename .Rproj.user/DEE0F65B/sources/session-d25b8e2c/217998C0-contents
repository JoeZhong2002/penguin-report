---
title: "Tutorial 6: Refactoring R Code"
format: html
---

# Introduction

In this tutorial, you will refactor the code into separate scripts corresponding to each section. The dataset we will use comes from the `palmerpenguins` package, which contains measurements of penguins from three species.

## Load Libraries and Data

library(tidyverse)

data <- read_rds("data/clean_data.rds")


# Methods

In this section, we perform exploratory data analysis (EDA) and prepare the data for modeling.

summary_stats <- read_csv("results/summary_stats.csv")
summary_stats

#| echo: false
knitr::include_graphics("results/bill_length_plot.png")


library(tidymodels)

conf_mat_res <- readRDS("results/confusion_matrix.rds")
conf_mat_res

# Model

We will fit a classification model using `tidymodels` to predict the species of a penguin based on its physical characteristics.

```{r}
# Split data
set.seed(123)
data_split <- initial_split(data, strata = species)
train_data <- training(data_split)
test_data <- testing(data_split)

# Define model
penguin_model <- nearest_neighbor(mode = "classification", neighbors = 5) %>%
  set_engine("kknn")

# Create workflow
penguin_workflow <- workflow() %>%
  add_model(penguin_model) %>%
  add_formula(species ~ .)

# Fit model
penguin_fit <- penguin_workflow %>%
  fit(data = train_data)
```

# Results

We evaluate the performance of the model using the test dataset.

```{r}
# Predict on test data
predictions <- predict(penguin_fit, test_data, type = "class") %>%
  bind_cols(test_data)

# Confusion matrix
conf_mat <- conf_mat(predictions, truth = species, estimate = .pred_class)
conf_mat
```

# Conclusion

In this tutorial, we:

- Loaded and cleaned the `palmerpenguins` dataset.
- Performed exploratory data analysis.
- Built a k-Nearest Neighbors classification model using `tidymodels`.
- Evaluated the model's performance.